{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Documents\\\\React\\\\my-front-production\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Documents\\\\React\\\\my-front-production\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { startOfMonth, endOfMonth } from 'date-fns';\nimport { forEach, filter } from 'lodash';\nimport Constants from '../../../utils/constants';\nexport var Months = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\nexport var tacticalActions = {\n  SET_MONTH: 'SET_MONTH',\n  SET_YEAR: 'SET_YEAR',\n  SET_COST: 'SET_COST',\n  SET_PRODUCTION: 'SET_PRODUCTION',\n  SET_PRODUCTION_ORDERS: 'SET_PRODUCTION_ORDERS',\n  SET_HOURS: 'SET_HOURS',\n  SET_DATA: 'SET_DATA'\n};\nexport var setData = function setData(data) {\n  return {\n    type: tacticalActions.SET_DATA,\n    payload: data\n  };\n};\nexport var setMonth = function setMonth(month) {\n  return {\n    type: tacticalActions.SET_MONTH,\n    payload: month\n  };\n};\nexport var setYear = function setYear(year) {\n  return {\n    type: tacticalActions.SET_YEAR,\n    payload: year\n  };\n};\nexport var setCost = function setCost(cost) {\n  return {\n    type: tacticalActions.SET_COST,\n    payload: cost\n  };\n};\nexport var setProduction = function setProduction(production) {\n  return {\n    type: tacticalActions.SET_PRODUCTION,\n    payload: production\n  };\n};\nexport var setProductionOrders = function setProductionOrders(orders) {\n  return {\n    type: tacticalActions.SET_PRODUCTION_ORDERS,\n    payload: orders\n  };\n};\nexport var setTotalHours = function setTotalHours(hours) {\n  return {\n    type: tacticalActions.SET_HOURS,\n    payload: hours\n  };\n};\nexport var fetchCostRawMaterial = function fetchCostRawMaterial() {\n  var value = axios.get(\"\".concat(Constants.Financial_API.address).concat(Constants.Financial_API.routes.CustoMateriaPrima)).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n    return 0;\n  });\n  return value;\n};\nexport var fetchProdOrders = function fetchProdOrders(month, year) {\n  var start = startOfMonth(new Date(year, month, 1)).toJSON();\n  var end = endOfMonth(new Date(year, month, 1)).toJSON();\n  console.log(start);\n  console.log(end);\n  var value = axios.get(\"\".concat(Constants.Sales_API.address).concat(Constants.Sales_API.routes.Pedidos, \"?\").concat(Constants.URL.inicio, \"=\").concat(start, \"&\").concat(Constants.URL.fim, \"=\").concat(end)).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n    return [];\n  });\n  return value;\n};\nexport var fetchProduction = function fetchProduction(month, year) {\n  var Production = Constants.Production,\n      URL = Constants.URL;\n  var value = axios.get(\"\".concat(Production.address).concat(Production.routes.getAllProducaoPorMesTurno), {\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  }).then(function (response) {\n    return processProductionByMonth(month, response.data);\n  }).catch(function (error) {\n    console.log(error);\n    return [];\n  });\n  return value;\n};\nexport var fetchHoursMonth =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(month) {\n    var retorno;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.get(\"\".concat(Constants.RH_API.address).concat(Constants.RH_API.routes.HorasTrabalhadas, \"/\").concat(Constants.URL.mes, \"/\").concat(month)).then(function (response) {\n              return response.data;\n            }).catch(function (error) {\n              console.log(error);\n              return [];\n            });\n\n          case 2:\n            retorno = _context.sent;\n            return _context.abrupt(\"return\", processWokedHours(retorno));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function fetchHoursMonth(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchEmployers =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(turno) {\n    var retorno;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"\".concat(Constants.RH_API.address).concat(Constants.RH_API.routes.Funcionarios, \"/\").concat(Constants.URL.turno, \"=\").concat(turno)).then(function (response) {\n              return response.data;\n            }).catch(function (error) {\n              console.log(error);\n              return [];\n            });\n\n          case 2:\n            retorno = _context2.sent;\n            return _context2.abrupt(\"return\", retorno);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function fetchEmployers(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getMonthName = function getMonthName(value) {\n  var result = '';\n  forEach(Months, function (month, index) {\n    if (index === value) {\n      result = month;\n      return false;\n    }\n  });\n  return result;\n};\nexport var processWokedHours = function processWokedHours(worked) {\n  var quant = 0;\n  forEach(worked, function (work, index) {\n    quant += Number(work.HorasTrabalhadasNoMes);\n  });\n  return quant;\n};\nexport var processProductionsOrders = function processProductionsOrders(production_orders) {\n  var quant_total = 0;\n  forEach(production_orders, function (order, index) {\n    quant_total += order.quantidade;\n  });\n  return quant_total;\n};\nexport var processProductionByMonth = function processProductionByMonth(month, productions) {\n  var month_name = getMonthName(month);\n  var all = filter(productions, function (production, index) {\n    console.log(production.mes === month_name);\n    console.log(month_name);\n\n    if (production.mes === month_name) {\n      return production;\n    }\n  });\n  console.log(all);\n  return all;\n};","map":{"version":3,"sources":["D:\\Documents\\React\\my-front-production\\src\\redux\\actions\\pages\\tactical.ts"],"names":["axios","startOfMonth","endOfMonth","forEach","filter","Constants","Months","tacticalActions","SET_MONTH","SET_YEAR","SET_COST","SET_PRODUCTION","SET_PRODUCTION_ORDERS","SET_HOURS","SET_DATA","setData","data","type","payload","setMonth","month","setYear","year","setCost","cost","setProduction","production","setProductionOrders","orders","setTotalHours","hours","fetchCostRawMaterial","value","get","Financial_API","address","routes","CustoMateriaPrima","then","response","catch","error","console","log","fetchProdOrders","start","Date","toJSON","end","Sales_API","Pedidos","URL","inicio","fim","fetchProduction","Production","getAllProducaoPorMesTurno","headers","processProductionByMonth","fetchHoursMonth","RH_API","HorasTrabalhadas","mes","retorno","processWokedHours","fetchEmployers","turno","Funcionarios","getMonthName","result","index","worked","quant","work","Number","HorasTrabalhadasNoMes","processProductionsOrders","production_orders","quant_total","order","quantidade","productions","month_name","all"],"mappings":"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","sourcesContent":["import { WorkedHours, EmployerInterface } from './../../../interfaces/employer'\r\nimport axios from 'axios'\r\nimport { startOfMonth, endOfMonth, format } from 'date-fns'\r\n\r\nimport { map, forEach, filter } from 'lodash'\r\n\r\nimport { OptionInterface } from './../../../interfaces/option'\r\nimport { ProductionOrderInterface } from '../../../interfaces/production_order'\r\n\r\nimport Constants from '../../../utils/constants'\r\nimport { ProductionInterface } from '../../../interfaces/production'\r\n\r\nexport const Months: string[] = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']\r\n\r\nexport const tacticalActions = {\r\n    SET_MONTH: 'SET_MONTH',\r\n    SET_YEAR: 'SET_YEAR',\r\n    SET_COST: 'SET_COST',\r\n    SET_PRODUCTION: 'SET_PRODUCTION',\r\n    SET_PRODUCTION_ORDERS: 'SET_PRODUCTION_ORDERS',\r\n    SET_HOURS: 'SET_HOURS',\r\n    SET_DATA: 'SET_DATA',\r\n}\r\n\r\nexport const setData = (data: any) => ({\r\n\r\n    type: tacticalActions.SET_DATA,\r\n    payload: data,\r\n})\r\n\r\nexport const setMonth = (month: number) => ({\r\n\r\n    type: tacticalActions.SET_MONTH,\r\n    payload: month,\r\n})\r\n\r\nexport const setYear = (year: number) => ({\r\n\r\n    type: tacticalActions.SET_YEAR,\r\n    payload: year,\r\n})\r\n\r\nexport const setCost = (cost: number) => ({\r\n\r\n    type: tacticalActions.SET_COST,\r\n    payload: cost,\r\n})\r\n\r\nexport const setProduction = (production: ProductionInterface[]) => ({\r\n    type: tacticalActions.SET_PRODUCTION,\r\n    payload: production,\r\n})\r\n\r\nexport const setProductionOrders = (orders: ProductionOrderInterface[]) => ({\r\n\r\n    type: tacticalActions.SET_PRODUCTION_ORDERS,\r\n    payload: orders,\r\n})\r\n\r\nexport const setTotalHours = (hours: number) => ({\r\n\r\n    type: tacticalActions.SET_HOURS,\r\n    payload: hours,\r\n})\r\n\r\nexport const fetchCostRawMaterial = () => {\r\n\r\n    const value: Promise<number> =\r\n        axios.get(`${Constants.Financial_API.address}${Constants.Financial_API.routes.CustoMateriaPrima}`)\r\n            .then((response) => response.data)\r\n            .catch((error) => { console.log(error); return 0 })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchProdOrders = (month: number, year: number) => {\r\n\r\n    const start = startOfMonth(new Date(year, month, 1)).toJSON()\r\n    const end = endOfMonth(new Date(year, month, 1)).toJSON()\r\n\r\n    console.log(start)\r\n    console.log(end)\r\n\r\n    const value: Promise<ProductionOrderInterface[]> =\r\n        axios.get(`${Constants.Sales_API.address}${Constants.Sales_API.routes.Pedidos}?${Constants.URL.inicio}=${start}&${Constants.URL.fim}=${end}`)\r\n            .then((response) => response.data)\r\n            .catch((error) => { console.log(error); return [] })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchProduction = (month: number, year: number) => {\r\n\r\n    const { Production, URL } = Constants\r\n\r\n    const value: Promise<ProductionInterface[]> = axios.get(`${Production.address}${Production.routes.getAllProducaoPorMesTurno}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n        },\r\n    })\r\n        .then((response) => processProductionByMonth(month, response.data))\r\n        .catch((error) => { console.log(error); return [] })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchHoursMonth = async (month: number) => {\r\n\r\n    const retorno: WorkedHours[] = await axios.get(\r\n        `${Constants.RH_API.address}${Constants.RH_API.routes.HorasTrabalhadas}/${Constants.URL.mes}/${month}`)\r\n        .then((response) => response.data)\r\n        .catch((error) => { console.log(error); return [] })\r\n\r\n    return processWokedHours(retorno)\r\n}\r\n\r\nexport const fetchEmployers = async (turno: string) => {\r\n\r\n    const retorno: EmployerInterface[] = await axios.get(\r\n        `${Constants.RH_API.address}${Constants.RH_API.routes.Funcionarios}/${Constants.URL.turno}=${turno}`)\r\n        .then((response) => response.data)\r\n        .catch((error) => { console.log(error); return [] })\r\n\r\n    return retorno\r\n}\r\n\r\nexport const getMonthName = (value: number): string => {\r\n\r\n    let result: string = ''\r\n\r\n    forEach(Months, (month: string, index: number) => {\r\n\r\n        if (index === value) {\r\n\r\n            result = month\r\n            return false\r\n        }\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nexport const processWokedHours = (worked: WorkedHours[]) => {\r\n\r\n    let quant: number = 0\r\n\r\n    forEach(worked, (work: WorkedHours, index: number) => {\r\n\r\n        quant += Number(work.HorasTrabalhadasNoMes)\r\n    })\r\n\r\n    return quant\r\n}\r\n\r\nexport const processProductionsOrders = (production_orders: ProductionOrderInterface[]) => {\r\n\r\n    let quant_total: number = 0\r\n\r\n    forEach(production_orders, (order: ProductionOrderInterface, index: number) => {\r\n\r\n        quant_total += order.quantidade\r\n    })\r\n\r\n    return quant_total\r\n}\r\n\r\nexport const processProductionByMonth = (month: number, productions: ProductionInterface[]): ProductionInterface[] => {\r\n\r\n    const month_name: string = getMonthName(month)\r\n\r\n    const all: ProductionInterface[] = filter(productions, (production: ProductionInterface, index: number) => {\r\n\r\n        console.log(production.mes === month_name)\r\n        console.log(month_name)\r\n        if (production.mes === month_name) {\r\n\r\n            return production\r\n        }\r\n    })\r\n\r\n    console.log(all)\r\n\r\n    return all\r\n}\r\n"]},"metadata":{},"sourceType":"module"}