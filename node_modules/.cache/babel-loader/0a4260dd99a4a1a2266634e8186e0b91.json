{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Documents\\\\React\\\\my-front-production\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Documents\\\\React\\\\my-front-production\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { startOfMonth, endOfMonth, format } from 'date-fns';\nimport { map, forEach, compact } from 'lodash';\nimport Constants from '../../../utils/constants';\nexport var Months = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\nexport var tacticalActions = {\n  SET_MONTH: 'SET_MONTH',\n  SET_YEAR: 'SET_YEAR',\n  SET_COST: 'SET_COST',\n  SET_PRODUCTION: 'SET_PRODUCTION',\n  SET_PRODUCTION_ORDERS: 'SET_PRODUCTION_ORDERS',\n  SET_HOURS: 'SET_HOURS',\n  SET_DATA: 'SET_DATA',\n  SET_PRODUCT: 'SET_PRODUCT'\n};\nexport var setData = function setData(data) {\n  return {\n    type: tacticalActions.SET_DATA,\n    payload: data\n  };\n};\nexport var setMonth = function setMonth(month) {\n  return {\n    type: tacticalActions.SET_MONTH,\n    payload: month\n  };\n};\nexport var setYear = function setYear(year) {\n  return {\n    type: tacticalActions.SET_YEAR,\n    payload: year\n  };\n};\nexport var setCost = function setCost(cost) {\n  return {\n    type: tacticalActions.SET_COST,\n    payload: cost\n  };\n};\nexport var setProduction = function setProduction(production) {\n  return {\n    type: tacticalActions.SET_PRODUCTION,\n    payload: production\n  };\n};\nexport var setProductionOrders = function setProductionOrders(orders) {\n  return {\n    type: tacticalActions.SET_PRODUCTION_ORDERS,\n    payload: orders\n  };\n};\nexport var setTotalHours = function setTotalHours(hours) {\n  return {\n    type: tacticalActions.SET_HOURS,\n    payload: hours\n  };\n};\nexport var setProduct = function setProduct(product) {\n  return {\n    type: tacticalActions.SET_PRODUCT,\n    payload: product\n  };\n};\nexport var fetchCostRawMaterial = function fetchCostRawMaterial() {\n  var value = axios.get(\"\".concat(Constants.Financial_API.address).concat(Constants.Financial_API.routes.CustoMateriaPrima)).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n    return 0;\n  });\n  return value;\n};\nexport var fetchProduct = function fetchProduct() {\n  var value = axios.get(\"\".concat(Constants.Financial_API.address).concat(Constants.Financial_API.routes.Produto, \"/2\")).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n    return 0;\n  });\n  return value;\n};\nexport var fetchProdOrders = function fetchProdOrders(month, year) {\n  var start = format(startOfMonth(new Date(year, month, 1)), 'yyyy-MM-dd');\n  var end = format(endOfMonth(new Date(year, month, 1)), 'yyyy-MM-dd');\n  var value = axios.get(\"\".concat(Constants.Sales_API.address).concat(Constants.Sales_API.routes.PedidosPeriodo).concat(start, \"/\").concat(end)).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n    return [];\n  });\n  return value;\n};\nexport var fetchProduction =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(month, year) {\n    var Production, URL, value;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Production = Constants.Production, URL = Constants.URL;\n            _context.next = 3;\n            return axios.get(\"\".concat(Production.address).concat(Production.routes.getAllProducaoPorMesTurno), {\n              headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*'\n              }\n            }).then(function (response) {\n              return response.data;\n            }).catch(function (error) {\n              console.log(error);\n              return [];\n            });\n\n          case 3:\n            value = _context.sent;\n            return _context.abrupt(\"return\", processProductionByMonth(month, value));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function fetchProduction(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchHoursMonth =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(month) {\n    var retorno;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.get(\"\".concat(Constants.RH_API.address).concat(Constants.RH_API.routes.HorasTrabalhadas, \"/\").concat(Constants.URL.mes, \"/\").concat(month + 1)).then(function (response) {\n              return response.data;\n            }).catch(function (error) {\n              console.log(error);\n              return [];\n            });\n\n          case 2:\n            retorno = _context2.sent;\n            return _context2.abrupt(\"return\", processWokedHours(retorno));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function fetchHoursMonth(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchEmployers =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(turno) {\n    var retorno;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return axios.get(\"\".concat(Constants.RH_API.address).concat(Constants.RH_API.routes.Funcionarios, \"/\").concat(Constants.URL.turno, \"=\").concat(turno)).then(function (response) {\n              return response.data;\n            }).catch(function (error) {\n              console.log(error);\n              return [];\n            });\n\n          case 2:\n            retorno = _context3.sent;\n            return _context3.abrupt(\"return\", retorno);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function fetchEmployers(_x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getMonthName = function getMonthName(value) {\n  var result = '';\n  forEach(Months, function (month, index) {\n    if (index === value) {\n      result = month;\n      return false;\n    }\n  });\n  return result;\n};\nexport var processWokedHours = function processWokedHours(worked) {\n  var quant = 0;\n  forEach(worked, function (work, index) {\n    quant += Number(work.HorasTrabalhadasNoMes);\n  });\n  return quant;\n};\nexport var processProductionsOrders = function processProductionsOrders(production_orders) {\n  var quant_total = 0;\n  forEach(production_orders, function (order, index) {\n    quant_total += order.quantidade;\n  });\n  return quant_total;\n};\nexport var processProductionByMonth = function processProductionByMonth(month, productions) {\n  var month_name = getMonthName(month);\n  var all = map(productions, function (production, index) {\n    if (production.mes === month_name) {\n      return production;\n    }\n  });\n  return compact(all);\n};","map":{"version":3,"sources":["D:\\Documents\\React\\my-front-production\\src\\redux\\actions\\pages\\tactical.ts"],"names":["axios","startOfMonth","endOfMonth","format","map","forEach","compact","Constants","Months","tacticalActions","SET_MONTH","SET_YEAR","SET_COST","SET_PRODUCTION","SET_PRODUCTION_ORDERS","SET_HOURS","SET_DATA","SET_PRODUCT","setData","data","type","payload","setMonth","month","setYear","year","setCost","cost","setProduction","production","setProductionOrders","orders","setTotalHours","hours","setProduct","product","fetchCostRawMaterial","value","get","Financial_API","address","routes","CustoMateriaPrima","then","response","catch","error","console","log","fetchProduct","Produto","fetchProdOrders","start","Date","end","Sales_API","PedidosPeriodo","fetchProduction","Production","URL","getAllProducaoPorMesTurno","headers","processProductionByMonth","fetchHoursMonth","RH_API","HorasTrabalhadas","mes","retorno","processWokedHours","fetchEmployers","turno","Funcionarios","getMonthName","result","index","worked","quant","work","Number","HorasTrabalhadasNoMes","processProductionsOrders","production_orders","quant_total","order","quantidade","productions","month_name","all"],"mappings":"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","sourcesContent":["import { ProductInterface } from './../../../interfaces/product'\r\nimport { WorkedHours, EmployerInterface } from './../../../interfaces/employer'\r\nimport axios from 'axios'\r\nimport { startOfMonth, endOfMonth, format } from 'date-fns'\r\n\r\nimport { map, forEach, compact } from 'lodash'\r\n\r\nimport { ProductionOrderInterface } from '../../../interfaces/production_order'\r\n\r\nimport Constants from '../../../utils/constants'\r\nimport { ProductionInterface } from '../../../interfaces/production'\r\n\r\nexport const Months: string[] = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']\r\n\r\nexport const tacticalActions = {\r\n    SET_MONTH: 'SET_MONTH',\r\n    SET_YEAR: 'SET_YEAR',\r\n    SET_COST: 'SET_COST',\r\n    SET_PRODUCTION: 'SET_PRODUCTION',\r\n    SET_PRODUCTION_ORDERS: 'SET_PRODUCTION_ORDERS',\r\n    SET_HOURS: 'SET_HOURS',\r\n    SET_DATA: 'SET_DATA',\r\n    SET_PRODUCT: 'SET_PRODUCT',\r\n}\r\n\r\nexport const setData = (data: any) => ({\r\n\r\n    type: tacticalActions.SET_DATA,\r\n    payload: data,\r\n})\r\n\r\nexport const setMonth = (month: number) => ({\r\n\r\n    type: tacticalActions.SET_MONTH,\r\n    payload: month,\r\n})\r\n\r\nexport const setYear = (year: number) => ({\r\n\r\n    type: tacticalActions.SET_YEAR,\r\n    payload: year,\r\n})\r\n\r\nexport const setCost = (cost: number) => ({\r\n\r\n    type: tacticalActions.SET_COST,\r\n    payload: cost,\r\n})\r\n\r\nexport const setProduction = (production: ProductionInterface[]) => ({\r\n    type: tacticalActions.SET_PRODUCTION,\r\n    payload: production,\r\n})\r\n\r\nexport const setProductionOrders = (orders: ProductionOrderInterface[]) => ({\r\n\r\n    type: tacticalActions.SET_PRODUCTION_ORDERS,\r\n    payload: orders,\r\n})\r\n\r\nexport const setTotalHours = (hours: number) => ({\r\n\r\n    type: tacticalActions.SET_HOURS,\r\n    payload: hours,\r\n})\r\n\r\nexport const setProduct = (product: ProductInterface) => ({\r\n\r\n    type: tacticalActions.SET_PRODUCT,\r\n    payload: product,\r\n})\r\n\r\nexport const fetchCostRawMaterial = () => {\r\n\r\n    const value: Promise<number> =\r\n        axios.get(`${Constants.Financial_API.address}${Constants.Financial_API.routes.CustoMateriaPrima}`)\r\n            .then((response) => response.data)\r\n            .catch((error) => { console.log(error); return 0 })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchProduct = () => {\r\n\r\n    const value: Promise<ProductInterface> =\r\n        axios.get(`${Constants.Financial_API.address}${Constants.Financial_API.routes.Produto}/2`)\r\n            .then((response) => response.data)\r\n            .catch((error) => { console.log(error); return 0 })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchProdOrders = (month: number, year: number) => {\r\n\r\n    const start = format(startOfMonth(new Date(year, month, 1)), 'yyyy-MM-dd')\r\n    const end = format(endOfMonth(new Date(year, month, 1)), 'yyyy-MM-dd')\r\n\r\n    const value: Promise<ProductionOrderInterface[]> =\r\n        axios.get(`${Constants.Sales_API.address}${Constants.Sales_API.routes.PedidosPeriodo}${start}/${end}`)\r\n            .then((response) => response.data)\r\n            .catch((error) => { console.log(error); return [] })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchProduction = async (month: number, year: number) => {\r\n\r\n    const { Production, URL } = Constants\r\n\r\n    const value: ProductionInterface[] = await axios.get(`${Production.address}${Production.routes.getAllProducaoPorMesTurno}`, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*',\r\n        },\r\n    })\r\n        .then((response) => response.data)\r\n        .catch((error) => { console.log(error); return [] })\r\n\r\n    return processProductionByMonth(month, value)\r\n}\r\n\r\nexport const fetchHoursMonth = async (month: number) => {\r\n\r\n    const retorno: WorkedHours[] = await axios.get(\r\n        `${Constants.RH_API.address}${Constants.RH_API.routes.HorasTrabalhadas}/${Constants.URL.mes}/${(month + 1)}`)\r\n        .then((response) => response.data)\r\n        .catch((error) => { console.log(error); return [] })\r\n\r\n    return processWokedHours(retorno)\r\n}\r\n\r\nexport const fetchEmployers = async (turno: string) => {\r\n\r\n    const retorno: EmployerInterface[] = await axios.get(\r\n        `${Constants.RH_API.address}${Constants.RH_API.routes.Funcionarios}/${Constants.URL.turno}=${turno}`)\r\n        .then((response) => response.data)\r\n        .catch((error) => { console.log(error); return [] })\r\n\r\n    return retorno\r\n}\r\n\r\nexport const getMonthName = (value: number): string => {\r\n\r\n    let result: string = ''\r\n\r\n    forEach(Months, (month: string, index: number) => {\r\n\r\n        if (index === value) {\r\n\r\n            result = month\r\n            return false\r\n        }\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nexport const processWokedHours = (worked: WorkedHours[]) => {\r\n\r\n    let quant: number = 0\r\n\r\n    forEach(worked, (work: WorkedHours, index: number) => {\r\n\r\n        quant += Number(work.HorasTrabalhadasNoMes)\r\n    })\r\n\r\n    return quant\r\n}\r\n\r\nexport const processProductionsOrders = (production_orders: ProductionOrderInterface[]) => {\r\n\r\n    let quant_total: number = 0\r\n\r\n    forEach(production_orders, (order: ProductionOrderInterface, index: number) => {\r\n\r\n        quant_total += order.quantidade\r\n    })\r\n\r\n    return quant_total\r\n}\r\n\r\nexport const processProductionByMonth = (month: number, productions: ProductionInterface[]): ProductionInterface[] => {\r\n\r\n    const month_name: string = getMonthName(month)\r\n\r\n    const all: ProductionInterface[] = map(productions, (production: ProductionInterface, index: number) => {\r\n\r\n        if (production.mes === month_name) {\r\n\r\n            return production\r\n        }\r\n    })\r\n\r\n    return compact(all)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}