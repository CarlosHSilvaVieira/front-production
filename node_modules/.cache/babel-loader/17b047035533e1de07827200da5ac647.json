{"ast":null,"code":"import axios from 'axios';\nimport { startOfMonth, endOfMonth } from 'date-fns';\nimport { map, forEach } from 'lodash';\nimport Constants from '../../../utils/constants';\nexport var Months = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\nexport var tacticalActions = {\n  SET_MONTH: 'SET_MONTH',\n  SET_YEAR: 'SET_YEAR',\n  SET_COST: 'SET_COST',\n  SET_PRODUCTION: 'SET_PRODUCTION',\n  SET_PRODUCTION_ORDERS: 'SET_PRODUCTION_ORDERS',\n  SET_DATA: 'SET_DATA'\n};\nexport var setData = function setData(data) {\n  return {\n    type: tacticalActions.SET_DATA,\n    payload: data\n  };\n};\nexport var setMonth = function setMonth(month) {\n  return {\n    type: tacticalActions.SET_MONTH,\n    payload: month\n  };\n};\nexport var setYear = function setYear(year) {\n  return {\n    type: tacticalActions.SET_YEAR,\n    payload: year\n  };\n};\nexport var setCost = function setCost(cost) {\n  return {\n    type: tacticalActions.SET_COST,\n    payload: cost\n  };\n};\nexport var setProduction = function setProduction(production) {\n  return {\n    type: tacticalActions.SET_PRODUCTION,\n    payload: production\n  };\n};\nexport var setProductionOrders = function setProductionOrders(orders) {\n  return {\n    type: tacticalActions.SET_PRODUCTION_ORDERS,\n    payload: orders\n  };\n};\nexport var fetchCostRawMaterial = function fetchCostRawMaterial() {\n  var value = axios.get(\"\".concat(Constants.Financial_API.address).concat(Constants.Financial_API.routes.CustoMateriaPrima)).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n    return 0;\n  });\n  return value;\n};\nexport var fetchProdOrders = function fetchProdOrders(month, year) {\n  var start = startOfMonth(new Date(\"\".concat(year, \"-\").concat(month, \"-01\")));\n  var end = endOfMonth(new Date(\"\".concat(year, \"-\").concat(month, \"-01\")));\n  var value = axios.get(\"\".concat(Constants.Sales_API.address).concat(Constants.Sales_API.routes.Pedidos, \"?\").concat(Constants.URL.inicio, \"=\").concat(start, \"&\").concat(Constants.URL.fim, \"=\").concat(end)).then(function (response) {\n    return response.data;\n  }).catch(function (error) {\n    console.log(error);\n    return [];\n  });\n  return value;\n};\nexport var fetchProduction = function fetchProduction(month, year) {\n  var Production_API = Constants.Production_API,\n      URL = Constants.URL;\n  var month_name = getMonthName(month);\n  var value = axios.get(\"\".concat(Production_API.address).concat(Production_API.routes.getAllProducaoPorMesTurno)).then(function (response) {\n    return getProductionByMonth(month_name, response.data);\n  }).catch(function (error) {\n    console.log(error);\n    return [];\n  });\n  return value;\n};\nexport var getMonthName = function getMonthName(value) {\n  var result = '';\n  forEach(Months, function (month, index) {\n    if (index == value) {\n      result = month;\n      return false;\n    }\n  });\n  return result;\n};\nexport var processProductionsOrders = function processProductionsOrders(production_orders) {\n  var quant_total = 0;\n  forEach(production_orders, function (order, index) {\n    quant_total += order.quantidade;\n  });\n  return quant_total;\n};\n\nvar getProductionByMonth = function getProductionByMonth(month, productions) {\n  var all = map(productions, function (production, index) {\n    if (production.mes == month) {\n      return production;\n    }\n  });\n  return all;\n};","map":{"version":3,"sources":["D:\\Documents\\React\\my-front-production\\src\\redux\\actions\\pages\\tactical.ts"],"names":["axios","startOfMonth","endOfMonth","map","forEach","Constants","Months","tacticalActions","SET_MONTH","SET_YEAR","SET_COST","SET_PRODUCTION","SET_PRODUCTION_ORDERS","SET_DATA","setData","data","type","payload","setMonth","month","setYear","year","setCost","cost","setProduction","production","setProductionOrders","orders","fetchCostRawMaterial","value","get","Financial_API","address","routes","CustoMateriaPrima","then","response","catch","error","console","log","fetchProdOrders","start","Date","end","Sales_API","Pedidos","URL","inicio","fim","fetchProduction","Production_API","month_name","getMonthName","getAllProducaoPorMesTurno","getProductionByMonth","result","index","processProductionsOrders","production_orders","quant_total","order","quantidade","productions","all","mes"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { startOfMonth, endOfMonth, format } from 'date-fns'\r\n\r\nimport { map, forEach } from 'lodash'\r\n\r\nimport { OptionInterface } from './../../../interfaces/option'\r\nimport { ProductionOrderInterface } from '../../../interfaces/production_order'\r\n\r\nimport Constants from '../../../utils/constants'\r\nimport { ProductionInterface } from '../../../interfaces/production';\r\n\r\nexport const Months: string[] =  ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']\r\n\r\nexport const tacticalActions = {\r\n    SET_MONTH: 'SET_MONTH',\r\n    SET_YEAR: 'SET_YEAR',\r\n    SET_COST: 'SET_COST',\r\n    SET_PRODUCTION: 'SET_PRODUCTION',\r\n    SET_PRODUCTION_ORDERS: 'SET_PRODUCTION_ORDERS',\r\n    SET_DATA: 'SET_DATA',\r\n}\r\n\r\nexport const setData = (data: any) => ({\r\n\r\n    type: tacticalActions.SET_DATA,\r\n    payload: data,\r\n})\r\n\r\nexport const setMonth = (month: number) => ({\r\n    \r\n    type: tacticalActions.SET_MONTH,\r\n    payload: month,\r\n})\r\n\r\nexport const setYear = (year: number) => ({\r\n    \r\n    type: tacticalActions.SET_YEAR,\r\n    payload: year,\r\n})\r\n\r\nexport const setCost = (cost: number) => ({\r\n    \r\n    type: tacticalActions.SET_COST,\r\n    payload: cost,\r\n})\r\n\r\nexport const setProduction = (production: (ProductionInterface | undefined)[]) => ({\r\n    type: tacticalActions.SET_PRODUCTION,\r\n    payload: production,\r\n})\r\n\r\nexport const setProductionOrders = (orders: ProductionOrderInterface[]) => ({\r\n\r\n    type: tacticalActions.SET_PRODUCTION_ORDERS,\r\n    payload: orders,\r\n})\r\n\r\nexport const fetchCostRawMaterial = () => {\r\n\r\n    const value: Promise<number> = axios.get(`${Constants.Financial_API.address}${Constants.Financial_API.routes.CustoMateriaPrima}`)\r\n    .then((response) => response.data)\r\n    .catch((error) => { console.log(error); return 0 })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchProdOrders = (month: number, year: number) => {\r\n\r\n    const start = startOfMonth(new Date(`${year}-${month}-01`))\r\n    const end = endOfMonth(new Date(`${year}-${month}-01`))\r\n\r\n    const value: Promise<ProductionOrderInterface[]> = axios.get(`${Constants.Sales_API.address}${Constants.Sales_API.routes.Pedidos}?${Constants.URL.inicio}=${start}&${Constants.URL.fim}=${end}`)\r\n    .then((response) => response.data)\r\n    .catch((error) => { console.log(error); return [] })\r\n\r\n    return value\r\n}\r\n\r\nexport const fetchProduction = (month: number, year: number) => {\r\n    \r\n    const { Production_API, URL } = Constants\r\n\r\n    const month_name: string = getMonthName(month)\r\n\r\n    const value: Promise<(ProductionInterface | undefined )[]> = axios.get(`${Production_API.address}${Production_API.routes.getAllProducaoPorMesTurno}`)\r\n    .then((response) => getProductionByMonth(month_name, response.data))\r\n    .catch((error) => { console.log(error); return [] })\r\n\r\n    return value\r\n}\r\n\r\nexport const getMonthName = (value: number): string => {\r\n\r\n    let result: string = ''\r\n\r\n    forEach(Months, (month: string, index: number) => {\r\n\r\n        if (index == value) {\r\n\r\n            result = month\r\n            return false\r\n        }\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nexport const processProductionsOrders = (production_orders: Array<ProductionOrderInterface>) => {\r\n\r\n    let quant_total: number = 0\r\n\r\n    forEach(production_orders, (order: ProductionOrderInterface, index: number) => {\r\n        \r\n        quant_total += order.quantidade\r\n    })\r\n\r\n    return quant_total\r\n}\r\n\r\nconst getProductionByMonth = (month: string, productions: ProductionInterface[]): (ProductionInterface | undefined)[] => {\r\n\r\n    const all: (ProductionInterface | undefined)[] = map(productions, (production: ProductionInterface, index: number) => {\r\n\r\n        if (production.mes == month) {\r\n\r\n            return production\r\n        }\r\n    })\r\n\r\n    return all\r\n}"]},"metadata":{},"sourceType":"module"}